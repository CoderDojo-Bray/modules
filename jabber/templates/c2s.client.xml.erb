<!-- c2s configuration : Managed by puppet -->
<c2s>
    <!-- Our ID on the network -->
    <id>c2s</id>
    
  <!-- The process ID file -->
  <pidfile>/usr/local/var/jabberd/pid/c2s.pid</pidfile>
  
  <!-- Router connection configuration -->
  <router>
    <!-- IP/port the router is waiting for connections on -->
    <ip><%= @masterWANIP.chomp %></ip>            
    <port><%= @routerPort %></port>             

    <!-- Username/password to authenticate as -->
    <user><%= @routerUser %></user>          
    <pass><%= @routerPassword %></pass>  

    <pemfile><%= @routerPEMFile %></pemfile>

    <retry>
      <!-- Retry indefinitely to connect to the router --->
      <init>-1</init>

      <!-- Retry indefinitely to reconnect on lost connection -->
      <lost>-1</lost>

      <!-- Sleep for this many seconds before trying attempting a reconnection -->
      <sleep>5</sleep>
    </retry>
   </router>    
  
  
  <!-- Log configuration - type is "syslog", "file" or "stdout" -->
  <log type='syslog'>
    <!-- Log ident when logging to syslog -->
    <ident>jabberd/c2s</ident>

    <!-- Use the default log facility -->
    <facility>local3</facility>
  </log>
  
<!-- Local network configuration -->
  <local>
    <!-- Who we identify ourselves as. This should correspond to the
         ID (host) that the session manager thinks it is. Y

         realm
         attribute specifies the auth/reg or SASL authentication realm
         for the host. If the attribute is not specified, the realm will
         be selected by the SASL mechanism, or will be the same as the ID
         itself. Be aware that users are assigned to a realm, not a host,
         so two hosts in the same realm will have the same users. 

         pemfile
         attribute specifies the file containing a SSL certificate and
         private key for client connections. If this is non existant,
         clients will not be offered the STARTTLS stream extension
        
         verify-mode
         SSL verify mode - see SSL_CTX_set_verify(3), mode parameter.
         Sum of the following options:
         SSL_VERIFY_NONE                 0x00
                 SSL_VERIFY_PEER                 0x01
                 SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
                 SSL_VERIFY_CLIENT_ONCE          0x04
                 Use 7 to require all clients to present _valid_ certificates.


         cachain
         SSL CA chain. Used to verify client certificates.
         CA names published to client upon connection.

         require-starttls
         If this attribute is set to any value, clients must do STARTTLS
         before they can authenticate. Until the stream is encrypted,
         all packets will be dropped.

         register-enable
         Remove this attribute to disable account registrations.

         instructions
         Human-readable instructions to be returned to client when
         registration is requested.

         register-oob
         URL to be attached as an alternative, out-of-band registration
         method. Usually web-based http:// URL.

         password-change
         Password change only. 
          -->
          
    <id realm='company.int'
        register-enable='yes'
        instructions='Enter a username and password to register with this server.'
        password-change='yes'
    ><%= @routerServer %></id>

    <!-- IP address to bind to -->
    <ip>0.0.0.0</ip>

    <!-- Port to bind to(default: 5222) -->
    <port>5222</port>

  </local>

  <!-- Input/output settings -->
  <io>
    <!-- Maximum number of file descriptors. This value sets an upper
         limit on the number of users who may be logged in to this
         server at a given time. Each user consumers one file
         descriptor.
    -->
    <max_fds>256</max_fds>

    <!-- Rate limiting -->
    <limits>
      <!-- Maximum bytes per second - if more than X bytes are sent in Y
           seconds, connection is throttled for Z seconds. The format
           is:

             <bytes seconds='Y' throttle='Z'>X</bytes>

           Default Y is 1, default Z is 5. set X to 0 to disable. -->
      <bytes>0</bytes>

      <!-- Maximum number of stanzas per second - if more than X stanzas
           are sent in Y seconds, connection is throttled for Z seconds.
           The format is:

             <stanzas seconds='Y' throttle='Z'>X</stanzas>

           Default Y 1, default Z is 5. Set X to 0 to disable -->
      <stanzas>1000</stanzas>

      <!-- Maximum connects per second - if more than X connects are
           attempted from a single IP in Y seconds, that IP is throttled
           for Z seconds. The format is:

             <connects seconds='Y' throttle='Z'>X</connects>

           Default Y is 5, default Z is 5. set X to 0 to disable. -->
      <connects>300</connects>

      <!-- Maximum stanza size - if more than given number of bytes
           are read in one incoming stanza, the stream is closed
           with policy-violation error.

           Set to 0 to disable.
           Values less than 16384 might not work. -->
      <stanzasize>65535</stanzasize>
    </limits>

    <!-- Enable XEP-0138: Stream Compression -->
    <!--
    <compression/>
    -->

    <!-- IP-based access controls. If a connection IP matches an allow
         rule, the connection will be accepted. If a connecting IP
         matches a deny rule, the connection will be refused. If the
         connecting IP does not match any rules, or it matches both an
         allow and a deny rule, the contents of the <order/> option
         determines what happens. -->
    <access>
      <!-- Rule check order (default: allow,deny)

           allow,deny - Check allow rules, then check deny rules.
                        Allow by default.
           deny,allow - Check deny rules, then check allow rules.
                        Deny by default. -->
      <order>allow,deny</order>
    </access>

    <!-- Timed checks -->
    <check>
      <!-- Interval between checks.

           Open client connections will be checked every n seconds, and
           the following checks applied.

           0 disables all checks.                       (default: 0) -->
      <interval>60</interval>

      <!-- Idle connection checks.

           Connections that have not sent data for longer than this many
           seconds will be dropped.

           0 disables idle timeouts.                    (default: 0) -->
      <idle>0</idle>

      <!-- Keepalives.

           Connections that have not sent data for longer than this many
           seconds will have a single whitespace character sent to them.
           This will force the TCP connection to be closed if they have
           disconnected without us knowing about it.

           0 disables keepalives.                       (default: 0) -->
      <keepalive>3600</keepalive>

    </check>

  </io> 


  <!-- Statistics -->
  <stats></stats>

  <!-- PBX integration -->
  <pbx></pbx>  
  
  <stream_redirect></stream_redirect>  
  
 <!-- Authentication/registration database configuration -->
  <authreg>
    <!-- Dynamic authreg modules path -->
    <path>/usr/local/lib/jabberd</path>

    <!-- Backend module to use -->
    <module>pgsql</module>

    <!-- Available authentication mechanisms -->
    <mechanisms>

      <!-- These are the traditional Jabber authentication mechanisms.
           Comment out any that you don't want to be offered to clients.
           Note that if the auth/reg module does not support one of
           these mechanisms, then it will not be offered regardless of
           whether or not it is enabled here. -->
      <traditional>
        <plain/>
      </traditional>

      <!-- SASL authentication mechanisms. Comment out any that you
           don't want to be offered to clients. Again, if the auth/reg
           module does not support one of these mechanisms, then it will
           not be offered. -->
      <sasl>
        <plain/>
        </sasl>

    </mechanisms>

    <!-- PostgreSQL module configuration -->
    <pgsql>
      <!-- PostgreSQL connection info.
           For the rest of the options see
           http://www.postgresql.org/docs/8.0/interactive/libpq.html -->
      <conninfo>dbname=jabberd2 user=jabberd2 password=topsecret</conninfo>

      <!-- Alternatively you may set connection settings separately.
           These are used only in absence of 'conninfo' -->

      <!-- Database server host and port -->
      <host>localhost</host>
      <port>5432</port>

      <!-- Database schema -->
      <schema>public</schema>


      <!-- Passwords in DB may be stored in plain or hashed format -->
      <!-- NOTE: If you are using hashed passwords, the only auth
                 method that will work is PLAIN.
                 Make sure that you disabled others in 'mechanisms'
                 sections of the config file. -->
      <password_type>
        <!-- only one may be enabled here -->
        <a1hash/>
      </password_type>
    </pgsql>

  </authreg>  
  
  
</c2s>

